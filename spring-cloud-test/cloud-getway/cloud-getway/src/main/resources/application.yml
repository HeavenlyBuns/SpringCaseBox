spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      discovery:
        locator:
          # 是否与服务注册于发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 false，
          #设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。
          enabled: true
          # 设置了自定义过滤器工厂
          #routes:
          # 用于配合具体的路由规则，是一个数组。这里我创建了一个 id 为 default_path_to_http 的路由，
          #其中的配置是将未匹配的请求转发到 https://windmt.com。实际上开启了服务发现后，如果只使用默认创建的路由规则，这个 routes 不配置也是可以的
          #        - id: default_path_to_http
          #          uri: https://windmt.com
          #          order: 10000
        #          predicates:
        #            - Path=/**
        #          filters:
        #            - SetPath=/
      routes:
        - id: service_customer
          uri: lb://EUREKA-PRODUCER
          order: 0
          predicates:
            - Path=/eureka-producer/**
          filters:
            - StripPrefix=1
            - name: RequestRateLimiter
              args:
                key-resolver: "#{@remoteAddrKeyResolver}"
                redis-rate-limiter.replenishRate: 1
                redis-rate-limiter.burstCapacity: 5
            - AddResponseHeader=X-Response-Default-Foo, Default-Bar
            #------------hystrix熔断---------------------------------------------------------------
            - name: Hystrix
              args:
                name: fallbackcmd #即 HystrixCommand 的名字
                # 即 fallback 对应的 uri，这里的 uri 仅支持 forward: schemed 的
                fallbackUri: forward:/fallback

      default-filters:
        # CustomGatewayFactory=false 就会给withParams赋值为false
        - CustomGatewayFactory=true



  # redis配置
  redis:
    host: 192.168.10.38
    port: 6379
    database: 2
    password: Yw2018

server:
  port: 12200

eureka:
  client:
    service-url:
      defaultZone: http://127.0.0.1:10000/eureka/

logging:
  level:
    org.springframework.cloud.gateway: debug


# 开启Actuator 的访问
management:
  endpoints:
    web:
      exposure:
        include: metrics
